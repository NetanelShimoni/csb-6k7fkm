{"version":3,"sources":["context/apiContext.js","List.js","App.js","reportWebVitals.js","index.js"],"names":["APIContext","createContext","APIContextProvider","children","useState","data","setData","isLoading","setIsLoading","useEffect","axios","get","then","response","machines","console","log","catch","error","value","loading","List","context","useContext","undefined","Error","useAPI","category","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAGMA,EAAaC,0BA2BJC,MAzBf,SAASA,EAAT,GAA2C,IAAbC,EAAY,EAAZA,SAAY,EAEhBC,mBAAS,IAFO,mBAEjCC,EAFiC,KAE3BC,EAF2B,OAGNF,oBAAS,GAHH,mBAGjCG,EAHiC,KAGtBC,EAHsB,KAkBxC,OAZAC,qBAAU,WAERC,IACGC,IAFO,cAGPC,MAAK,SAAUC,GACdP,EAAQO,EAASR,KAAKS,UACtBN,GAAa,GACbO,QAAQC,IAAIH,EAASR,KAAKS,aAE3BG,OAAM,SAACC,GAAD,OAAWH,QAAQC,IAAIE,QAC/B,IAGD,cAAChB,EAAD,CAAoBiB,MAAO,CAAEd,QAAQe,QAASb,EAA9C,SACGJ,KCtBP,IASekB,EATF,SAAC,GAAmB,IAAjBd,EAAgB,EAAhBA,UAENF,ED4BH,WACL,IAAMiB,EAAUC,qBAAWvB,GAC3B,QAAgBwB,IAAZF,EACF,MAAM,IAAIG,MAAM,0CAElB,OAAOH,ECjCUI,GAATrB,KAER,OACE,8BAAOE,EAAwC,2CAA5B,4BAAIF,EAAK,GAAGsB,cCMpBC,MAVf,WACE,OACE,cAAC,EAAD,UACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,SCIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e666f43d.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect, createContext } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst APIContext = createContext();\r\n\r\nfunction APIContextProvider({ children }) {\r\n  // Initialize state\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Fetch data\r\n  useEffect(() => {\r\n    let url = \"../db.json\";\r\n    axios\r\n      .get(url)\r\n      .then(function (response) {\r\n        setData(response.data.machines);\r\n        setIsLoading(false);\r\n        console.log(response.data.machines);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  return (\r\n    <APIContextProvider value={{ data }} loading={isLoading}>\r\n      {children}\r\n    </APIContextProvider>\r\n  );\r\n}\r\n\r\nexport default APIContextProvider;\r\n\r\n// Create a hook to use the APIContext, this is a Kent C. Dodds pattern\r\nexport function useAPI() {\r\n  const context = useContext(APIContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"Context must be used within a Provider\");\r\n  }\r\n  return context;\r\n}\r\n","import React from \"react\";\r\nimport { useAPI } from \"./context/apiContext\";\r\n\r\nconst List = ({ isLoading }) => {\r\n  // Grab data from useAPI in global context\r\n  const { data } = useAPI();\r\n\r\n  return (\r\n    <div>{!isLoading ? <p>{data[0].category}</p> : <p>Loading...</p>}</div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import \"./App.css\";\nimport List from \"./List\";\nimport APIContextProvider from \"./context/apiContext\";\n\nfunction App() {\n  return (\n    <APIContextProvider>\n      <div className=\"App\">\n        <List />\n      </div>\n    </APIContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}